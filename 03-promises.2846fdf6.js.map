{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAWC,GAClBH,EAAAI,OAAOC,QAAQF,GAEjB,SAASG,EAAUC,GACjBP,EAAAI,OAAOI,QAAQD,GAzCCE,SAASC,cAAc,SAC/BC,iBAAiB,UAE3B,SAAqBC,GACnB,IAAIC,EAAOC,OAAOC,KAAKF,KAAKV,OACxBa,EAASF,OAAOC,KAAKC,OAAOb,OAC5Bc,EAAQH,OAAOC,KAAKE,MAAMd,OAC1Be,EAAQ,EACRC,EAAeF,EAAQJ,EAE3BD,EAAMQ,iBAEN,IAAMC,EAAmBC,aAAY,YAYvC,SAAuBC,EAAUN,GAC/B,IAAMO,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,uBAAwCG,OAAfR,EAAS,QAAYQ,OAANd,EAAM,OAEpDY,EAAK,sBAAqCE,OAAfR,EAAS,QAAYQ,OAANd,EAAM,SAEnDA,OAjBHe,CAHAd,GAAS,EACTC,GAAgBN,GAEmBoB,KAAK/B,GAAYgC,MAAM5B,GAEtDY,IAAUF,GACZmB,cAAcd,KAEfR,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayForm = document.querySelector('.form');\ndelayForm.addEventListener('submit', getPromises);\n\nfunction getPromises(event) {\n  let step = Number(this.step.value);\n  let amount = Number(this.amount.value);\n  let delay = Number(this.delay.value);\n  let count = 0;\n  let delayForEach = delay - step;\n\n  event.preventDefault();\n\n  const generatorCounter = setInterval(() => {\n    count += 1;\n    delayForEach += step;\n\n    createPromise(count, delayForEach).then(showSucces).catch(showError);\n\n    if (count === amount) {\n      clearInterval(generatorCounter);\n    }\n  }, step);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nfunction showSucces(value) {\n  Notify.success(value);\n}\nfunction showError(error) {\n  Notify.failure(error);\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$showSucces","value","Notify","success","$ce04d3a99e08e73b$var$showError","error","failure","document","querySelector","addEventListener","event","step","Number","this","amount","delay","count","delayForEach","preventDefault","generatorCounter","setInterval","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","concat","$ce04d3a99e08e73b$var$createPromise","then","catch","clearInterval"],"version":3,"file":"03-promises.2846fdf6.js.map"}